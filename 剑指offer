题目描述：链表中删除重复节点
在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1->2->3->3->4->4->5 处理后为 1->2->5
/*
 public class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}
*/
public class Solution {
    public ListNode deleteDuplication(ListNode pHead)
    {
        if (pHead == null || pHead.next == null) return pHead;
        ListNode h = pHead;
        if (h.val == h.next.val) { //头节点重复
            ListNode tmp = null;
            while (pHead != null && pHead.val == h.val) {
                tmp = pHead;
                pHead = pHead.next;
            }
            if (pHead == null) return null; //所有节点都相等
            tmp.next = null;
            return (deleteDuplication(pHead));
        }
        h.next = deleteDuplication(pHead.next);//递归删除重复节点
        return h;
    }
}

题目描述：重建二叉树
输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    int[] pre, in;
    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
        this.pre = pre;
        this.in = in;
        if (pre.length == 0) return null;
        TreeNode root = help(0, pre.length-1, 0, pre.length-1);
        return root;
    }
    //根据二叉树的特点重建，根据先序遍历的根节点将对应的中序遍历分为两半，
    //中序遍历前半部分是左子树，后半部分是右子树；递归调用
    public TreeNode help(int i, int j, int m, int n) {
        TreeNode node = null;
        if (j >= pre.length || n >= pre.length) return null;
        if (i < 0 || m < 0) return null;
        for (int k = m; k <= n; k++){
            if (pre[i] == in[k]) {
                node = new TreeNode((pre[i]));
                node.left = help(i+1, i+k-m, m, k-1);
                node.right = help(i+k-m+1,j,k+1,n);
                break;
            }
        }
        
        return node;
    }
}
