1. 判断两个树的叶子节点序列是否相等。
思路：dfs.分别求出两棵树的叶子值序列，再进行比较。
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        List<Integer> seq1 = new LinkedList<>();
        List<Integer> seq2 = new LinkedList<>();
        preOrder(root1, seq1);
        preOrder(root2, seq2);
        if (seq1.size() != seq2.size()) return false;
        for (int i = 0; i < seq1.size(); i++) {
            if (seq1.get(i) != seq2.get(i)) return false;
        }
        return true;
        
    }
    public void preOrder(TreeNode root, List<Integer> seq) {
        if (root == null) return;
        if (root.left == null && root.right == null) {
            seq.add(root.val);
        }
        preOrder(root.left, seq);
        preOrder(root.right, seq);
    }
}

leetcode104. Maximum Depth of Binary Tree
思路：递归dfs.根节点的最大深度 = max(左孩子的最大深度，右孩子的最大深度）+ 1；
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null) return 0;
        int depth = 1;
        return depth+Math.max(maxDepth(root.left), maxDepth(root.right));
    }
}

1022. Sum of Root To Leaf Binary Numbers
思路：回溯法。
用一个list存访问过的节点值，先访问左子树，再访问右子树；
访问到叶子节点，根据list计算整数值并加到全局变量sum中，然后list删除最后一位（即回退一步）并返回；
右子树访问完list再删除最后一位（容易忽略）。
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int sum = 0;
    public int sumRootToLeaf(TreeNode root) {

        if (root == null) return 0;
        dfs(root, new LinkedList());
        return sum;
    }
    public void dfs(TreeNode root, LinkedList<Integer> list) {
        if (root == null)return;
        list.add(root.val);
        if (root.left == null && root.right == null) {
            sum += toInt(list);
            // System.out.println(sum);
            list.removeLast();
            return;
        }
        dfs(root.left, list);
        dfs(root.right, list);
        if (list.size() > 0) list.removeLast();
    }
    public int toInt(List<Integer> list) {
        int i = 0; 
        int val = 0;
        for (int n : list) {
            val = 2 * val + n;
        }
        return val;
    }
}

669. Trim a Binary Search Tree
思路：递归dfs.
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
   public TreeNode trimBST(TreeNode root, int L, int R) {
        if(root == null) return null; // Base case
        /*
        * If current node is greater than the Right limit, we will skip this one
        * try to append its left child to the current position
        * Or current is smaller than the Left limit, skip this one, and try to 
        * append its right child to the current position
        */
        if(root.val > R) return trimBST(root.left, L, R); 
        if(root.val < L) return trimBST(root.right, L, R);
        /*
        * Recursively, check current node's left child and right child if they are trimBST subtree already.
        */
        root.left = trimBST(root.left, L, R);
        root.right = trimBST(root.right, L, R);
        // Return the current Node;
        return root;
    }
}

429. N-ary Tree Level Order Traversal
思路：采用一个队列和一个计数器；计数器的值为当前层的节点数；
/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val,List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        
        List<List<Integer>> ans = new LinkedList<>();
        Queue<Node> queue = new ArrayDeque<>();
        if (root == null) return ans;
        queue.add(root);
        while (!queue.isEmpty()) {
            int count = queue.size();
            List<Integer> list = new LinkedList<>();
            while (count -- > 0) {
                Node node = queue.poll();
                list.add(node.val);
                for (Node n : node.children) {
                    if (n!= null) queue.add(n);
                }
                
            }
            ans.add(list);
        }
        return ans;
    }
}

226. Invert Binary Tree
思路：递归交换左右子树，套路与669题相似
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        if (root == null) return null;
        TreeNode left = root.left;
        root.left = invertTree(root.right);
        root.right = invertTree(left);
        return root;
    }
}

637. Average of Levels in Binary Tree
思路：层次遍历
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Double> averageOfLevels(TreeNode root) {
       List<Double> ans = new LinkedList<>();
        if (root == null) return ans;
        Queue<TreeNode> queue = new ArrayDeque<>();
        queue.add(root);
        while (!queue.isEmpty()) {
            int count = queue.size();
            int i = count;
            double sum = 0;
            while (i -- > 0) {
                TreeNode node = queue.poll();
                sum += (double)node.val;
                if (node.left != null) queue.add(node.left);
                if (node.right != null) queue.add(node.right);
                
            }
            ans.add(sum / count);
        }
        return ans;
    }
    
}

653. Two Sum IV - Input is a BST
思路：1.对树进行中序遍历得到一个有序数组，用双指针来求和；96ms
     2.对树遍历的时候用map存已遍历过得值，在添加之前进行查询；4ms
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 //双指针法
class Solution {
    List<Integer> list;
    public boolean findTarget(TreeNode root, int k) {
        if (root == null) return false;
        list = new LinkedList<>();
        inOrder(root);
        return isFind(k, list, 0, list.size() - 1);
    }
    public void inOrder(TreeNode root) {
        if (root == null) return;
        inOrder(root.left);
        list.add(root.val);
        inOrder(root.right);
    }
    public boolean isFind(int k, List<Integer> list, int from, int to) {
        int left = from;
        int right = to;
        while (left < right) {
            
            if (list.get(right) == k - list.get(left)) return true;
            while (left < right && list.get(right) > k - list.get(left)) right--;
            if (list.get(right) < k - list.get(left)) {
                left++;
            }
        }
        return false;
    }
}

//hashmap法
class Solution {
    Set<Integer> set;
    public boolean findTarget(TreeNode root, int k) {
        set = new HashSet<>();
        return helper(root, k);
    }
    
    boolean helper(TreeNode root, int target){
        if(root == null) {
            return false;
        }
        
        if(set.contains(target-root.val)){
            return true;
        }
        set.add(root.val);
        return helper(root.left, target) || helper(root.right, target);
    }
}

108. Convert Sorted Array to Binary Search Tree
思路：二分法；维护数组区间的左右下标，每次取当前区间的中间值作为当前节点值，其左子树从左半边区间取，右子树从右半边区间取，修改区间下标，进行递归。
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        if(nums.length == 0) return null;
        return helper(nums, 0, nums.length - 1);
    }
    public TreeNode helper(int[] nums, int L, int R) {
        if (L > R) return null;
        int mid = (L + R) >> 1;
        TreeNode node = new TreeNode(nums[mid]);
        node.left = helper(nums, L, mid - 1);
        node.right = helper(nums, mid + 1, R);
        return node;
    }
}

538. Convert BST to Greater Tree
思路：中序遍历，从最大值开始，用一个全局变量curr记录当前遍历的值的和。每次遍历时，将节点值与curr的和赋给当前节点，然后更新curr；
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int curr = 0;
    public TreeNode convertBST(TreeNode root) {
        
        if (root == null) return null;
        helper(root);
        return root;
        
    }
    public void helper(TreeNode root) {
        if (root == null) return;
        helper(root.right);
        root.val += curr;
        curr = root.val;
        helper(root.left);
    }
}

606. Construct String from Binary Tree
//自己写的，稍微有些发杂
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    StringBuilder sb;
    public String tree2str(TreeNode t) {
        if (t == null) return "";
        sb = new StringBuilder();
        
        preOrder(t);
        return sb.toString();
    }
    public void preOrder(TreeNode t) {
        if(t == null) return ;
        sb.append(Integer.toString(t.val));
        if (t.left != null) {
            sb.append("(");
            preOrder(t.left);
            sb.append(")");
            if (t.right != null) {
                sb.append("(");
                preOrder(t.right);
                sb.append(")");
            }
        }
        if (t.left == null && t.right != null) {
            sb.append("()(");
            preOrder(t.right);
            sb.append(")");
        }
        
    }
}

//评论里思路更清晰的
class Solution {
    public String tree2str(TreeNode t) {
        if (t == null) {
            return "";
        }

        String output = String.valueOf(t.val);
        if (t.left != null || t.right != null) {
            output += "(" + tree2str(t.left) + ")";
            if (t.right != null) {
                output += "(" + tree2str(t.right) + ")";
            }
        }
        return output;
    }
}

993. Cousins in Binary Tree
思路：层次遍历
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        if (root == null) return false;
        Queue<TreeNode> queue = new ArrayDeque<>();
        queue.add(root);
        while (!queue.isEmpty()) {
            int count = queue.size();
            boolean xFlag = false, yFlag = false;
            while (count -- > 0) {
                TreeNode node = queue.poll();
                if (node.left != null) {
                    if (node.left.val == x) {
                        xFlag = true;
                        if (yFlag) return true;
                        else if (node.right != null && node.right.val == y) return false;
                        
                    } else if(node.left.val == y) {
                        yFlag = true;
                        if (xFlag) return true;
                        else if (node.right != null && node.right.val == x) return false;
                    }
                    queue.add(node.left);
                }
                if (node.right != null) {
                    if (node.right.val == x) {
                        if (yFlag) return true;
                        else xFlag = true;
                    } 
                    if (node.right.val == y) {
                        if (xFlag) return true;
                        else yFlag = true;
                    } 
                    queue.add(node.right);
                }
            }
        }
        return false;
    }
}
100. Same Tree
思路：先判断根节点的值是否相等，然后递归判断左子树和右子树；
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if (p == null && q != null || p != null && q == null) return false;
        if (p != null && q != null) {
            if (p.val != q.val) return false;
            else return (isSameTree(p.left, q.left) && isSameTree(p.right, q.right));
            
        }
        return true;
    }
}

783. Minimum Distance Between BST Nodes
思路：最小差值为：Math.min(当前节点求得的最小差值，其左子树求得的最小差值，其右子树求得的最小差值);
     设l，r分别表示该几点左右子树中任意两个点的最小差值，
     l的求解：左子树中与当前节点差值最小的点为：其左子树中值最大的节点，即左子树中最右边的点；
     r的求解：右子树中与当前节点差值最小的点为：其右子树中值最小的节点，即右子树中最左边的点；
     利用递归方法，很容易得出结果。
 /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int minDiffInBST(TreeNode root) {
        
        TreeNode left, right;
        int l = 0;
        int r = 0;
        if (root.left != null) {
            left = root.left;
            
            //find the biggest node in the left sub-tree;
            while (left.right != null) {
                left = left.right;
            } 
            l = Math.min(root.val - left.val, minDiffInBST(root.left));
            
        } else {
            l = 9999;
        }
        if (root.right != null) {
            right = root.right;
            //find the smallest node in the right sub-tree;
            while (right.left != null) {
                right = right.left;
            }
            r = Math.min(right.val - root.val, minDiffInBST(root.right));
        } else {
            r = 9999;
        }
        return Math.min(l, r);
    }
    
}

404. Sum of Left Leaves
思路：dfs,从左右子树分别递归；
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int sum = 0;
    public int sumOfLeftLeaves(TreeNode root) {
        if (root == null) return 0;
        if (root.left == null && root.right == null) return 0;
        dfs(root);
        return sum;
    }
    public void dfs(TreeNode root) {
        if (root == null) return;
        if (root.left != null) {
            if (root.left.left == null && root.left.right == null) {
                sum += root.left.val;
            } else{
                dfs(root.left);
            } 
        } 
        if (root.right != null) {
            dfs(root.right);
        }
    }
}

257. Binary Tree Paths
思路：回溯法
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<String> ans;
    public List<String> binaryTreePaths(TreeNode root) {
        ans = new LinkedList<>();
        if (root == null) return ans;
        dfs(root, new StringBuilder());
        return ans;
    }
    public void dfs(TreeNode root, StringBuilder sb) {
        if (root == null) return;
        sb.append(root.val);
        sb.append("->");
        int c = String.valueOf(root.val).length(); //该数字的位数
        if (root.left  == null && root.right == null) {
            sb = sb.delete(sb.length() - 2, sb.length());
            ans.add(sb.toString());
            sb = sb.delete(sb.length()-c, sb.length());
            return;
        } 
        if (root.left != null) {
            dfs(root.left, sb);
        }
        if (root.right != null) {
            dfs(root.right, sb);
        }
        
        sb.delete(sb.length()-c-2, sb.length());
    }
}

二叉搜索树与双向链表
题目描述
输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。
思路：将一个节点的left指向左子树中最大的节点，right指向右子树中最小的节点，进行递归
public class Solution {
    public TreeNode Convert(TreeNode pRootOfTree) {
        if( pRootOfTree == null) return null;
        TreeNode head;
        if (pRootOfTree.left != null) {
            TreeNode t = getMax(pRootOfTree.left);
            t.right = pRootOfTree;
            pRootOfTree.left = t;
        }
        if (pRootOfTree.right != null) {
            TreeNode t = getMin(pRootOfTree.right);
            t.left = pRootOfTree;
            pRootOfTree.right = t;
        }
        if (pRootOfTree.left == null && pRootOfTree.right == null) return pRootOfTree;
        while (pRootOfTree.left!=null) pRootOfTree = pRootOfTree.left;
        return pRootOfTree;
    }
    public TreeNode getMin(TreeNode root) {
        Convert(root);
        while (root.left != null) {
            root = root.left;
        }
        return root;
    }
    public TreeNode getMax(TreeNode root) {
        Convert(root);
        while (root.right != null) {
            root = root.right;
        }
        return root;
    }
}
//先序遍历法
public TreeNode Convert(TreeNode root) {
    inOrder(root);
    return head;
}
private void inOrder(TreeNode node) {
    if (node == null)
        return;
    inOrder(node.left);
    node.left = pre;
    if (pre != null)
        pre.right = node;
    pre = node;
    if (head == null)
        head = node;
    inOrder(node.right);
}